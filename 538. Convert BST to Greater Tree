// iterative dfs
class Solution {
    public TreeNode convertBST(TreeNode root) {
        int sum = 0; 
        Deque<TreeNode> stack = new LinkedList<>();
        TreeNode dummy = root;
        while (root != null || !stack.isEmpty()) {
            while (root != null) {
                stack.offerLast(root);
                root = root.right;
            }
            root = stack.pollLast();
            sum += root.val;
            root.val = sum;
            root = root.left;
        }
        return dummy;
    }
}

// recursion dfs
class Solution {
    int sum = 0;
    public TreeNode convertBST(TreeNode root) {
        if (root == null) {
            return root;
        }
        convertBST(root.right);
        sum += root.val;
        root.val = sum;
        convertBST(root.left);
        return root;
    }
}
