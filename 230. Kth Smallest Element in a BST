//sol3 binary search
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        if (root == null) {
            return 0;
        }
        int left = helper(root.left);
        if (left == k - 1) {
            return root.val;
        } else if (left > k - 1) {
            return kthSmallest(root.left, k);
        } else {
            return kthSmallest(root.right, k - left - 1);
        }
    }
    private int helper(TreeNode node) {
        if (node == null) {
            return 0;
        }
        return 1 + helper(node.right) + helper(node.left);
    }
}

// iterative 
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        Deque<TreeNode> stack = new LinkedList<>();
        while (root != null) {
            stack.offerLast(root);
            root = root.left;
        }
        while (k > 0 && !stack.isEmpty()) {
            TreeNode cur = stack.pollLast();
            k--;
            if (k == 0) {
                return cur.val;
            }
            if (cur.right != null) {
                TreeNode right = cur.right;
                while (right != null) {
                    stack.offerLast(right);
                    right = right.left;
                }
            }
        }
        return -1;
    }
}

// inorder traversal, not optimal
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        List<Integer> a = new ArrayList<>();
        inorder(root, a);
        return a.get(k - 1);
    }
    private void inorder(TreeNode root, List<Integer> a) {
        if (root == null) {
            return;
        }
        inorder(root.left, a);
        a.add(root.val);
        inorder(root.right, a);
    }
}

// sol2: inorder traversal改进
class Solution {
    int count;
    int num = 0;
    public int kthSmallest(TreeNode root, int k) {
        count = k;
        inorder(root);
        return num;
    }
    private void inorder(TreeNode root) {
        if (root == null) {
            return;
        }
        inorder(root.left);
        count--;
        if (count == 0) {
            num = root.val;
            return;
        }
        inorder(root.right);
    }
}

// sol1: recursion
class Solution {
    int res = -1;
    int count = 0;
    public int kthSmallest(TreeNode root, int k) {
        if (root == null) {
            return 0;
        }
        count = k;
        helper(root);
        return res;
    }
    private void helper(TreeNode node) {
        if (node.left != null) {
            helper(node.left);
        }
        count--;
        if (count == 0) {
            res = node.val;
            return;
        }
        if (node.right != null) {
            helper(node.right);
        }
    }
}
