/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        if (root == null) {
            return new ArrayList<>();
        }
        List<List<Integer>> res = new ArrayList<>();
        Map<Integer, List<Integer>> map = new HashMap<>();
        Queue<TreeNode> queue = new LinkedList<>(); 
        Queue<Integer> cols = new LinkedList<>();
        queue.offer(root);
        cols.offer(0);
        int left = 0;
        int right = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            Map<Integer, List<Integer>> tmp = new HashMap<>();
            for (int i = 0; i < size; i++) {
                TreeNode cur = queue.poll();
                int col = cols.poll();
                List<Integer> list = tmp.getOrDefault(col, new ArrayList<>());
                list.add(cur.val);
                tmp.put(col, list);
                if (cur.left != null) {
                    queue.offer(cur.left);
                    cols.offer(col - 1);
                    left = Math.min(left, col - 1);
                }
                if (cur.right != null) {
                    queue.offer(cur.right);
                    cols.offer(col + 1);
                    right = Math.max(right, col + 1);
                }   
            }
            for (int key : tmp.keySet()) {
                List<Integer> list = map.getOrDefault(key, new ArrayList<>());
                List<Integer> val = tmp.get(key);
                Collections.sort(val);
                list.addAll(val);
                map.put(key, list);
            }
        }
        for (int i = left; i <= right; i++) {
            res.add(map.get(i));
        }
        return res;
    }
}
