// dfs
class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> cur = new ArrayList<>();
        helper(1, k,  n, cur, res);
        return res;
    }
    private void helper(int index, int size, int target, List<Integer> cur, List<List<Integer>> res) {
        if (cur.size() == size) {
            if (target == 0) {
                res.add(new ArrayList<>(cur));
            }
            return;
        }
        for (int i = index; i <= 9; i++) {
            if (i <= target) {
                cur.add(i);
                helper(i + 1, size, target - i, cur, res);
                cur.remove(cur.size() - 1);
            }
        }
    }
}
