/*
brute force
[0,1,0,3,12]
O(2n)
O(n)

[1,3,12,0,0]
             e
       s
 [0, j) non zero
 // fill in 0 for [j, len - 1]
O(2n) = O(n)
number of 0 : k 
len of nums : n
O(n + (n - k))
*/
// sol 1: 同向指针 maintain order + minimize the operation
class Solution {
    public void moveZeroes(int[] nums) {
        int s = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                swap(nums, s, i);
                s++;
            }
        }
    }
    private void swap(int[] nums, int s, int e) {
        int temp = nums[s];
        nums[s] = nums[e];
        nums[e] = temp;
    }
}

// sol 2: 相向指针 w/o maintain order 
class Solution {
    public void moveZeroes(int[] nums) {
        int s = 0;
        int e = nums.length - 1;
        while (s <= e) {
            while (s <= e && nums[s] != 0) {
                s++;
            }
            while (s <= e && nums[e] == 0) {
                e--;
            }
            if (s <= e) {
                swap(nums, s, e);
                s++;
                e--;
            }
        }
    }
    private void swap(int[] nums, int s, int e) {
        int temp = nums[s];
        nums[s] = nums[e];
        nums[e] = temp;
    }
}
