// 只允许遍历一次!
public class UniqueValueInStream {
    public static void main(String[] args) {
        System.out.println("Hello World!");
        DataStream test = new DataStream();
        test.add(1);
        test.add(2);
        test.add(3);
        test.add(4);
        test.add(5);
        System.out.println(test.firstUnique());
        test.add(1);
        System.out.println(test.firstUnique());
        test.add(2);
        System.out.println(test.firstUnique());
        test.add(3);
        System.out.println(test.firstUnique());
        test.add(4);
        System.out.println(test.firstUnique());
        test.add(5);
        test.add(6);
        System.out.println(test.firstUnique());
    }
}
class ListNode {
    int val;
    ListNode prev;
    ListNode next;
}
class DataStream {
    Map<Integer, ListNode> map;
    Set<Integer> set;
    ListNode head;
    ListNode tail;
    public DataStream(){
        // do intialization if necessary
        map = new HashMap<>();
        set = new HashSet<>();
        head = new ListNode();
        tail = new ListNode();
        head.next = tail;
        tail.next = head;
    }
    /**
     * @param num: next number in stream
     * @return: nothing
     */
    public void add(int num) {
        // write your code here
        if (!set.contains(num)) {
            ListNode newNode = new ListNode();
            newNode.val = num;
            addHead(newNode);
            map.put(num, newNode);
            set.add(num);
            return;
        } 
        ListNode node = map.get(num);
        if (node != null) {
            remove(node);
            map.remove(num);
        }
    }
    private void addHead(ListNode node) {
        node.prev = head;
        node.next = head.next;
        head.next.prev = node;
        head.prev = node;
    }
    private void remove(ListNode node) {
        ListNode prev = node.prev;
        ListNode next = node.next;
        prev.next = next;
        next.prev = prev;
    }
    /**
     * @return: the first unique number in stream
     */
    public int firstUnique() {
        // write your code here
        ListNode cur = tail.prev;
        if (cur != null && cur != head) {
            return cur.val;
        }
        return -1;
    }
}
