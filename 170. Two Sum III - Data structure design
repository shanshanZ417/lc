/*
每一个design题目，都会有不同的design方式，我们选择哪种是看tradeoff，看我们的需求。
In fact, there has to be one operation's time complexity is O(n) and the other is O(1),
no matter add or find. So clearly there's trade off when solve this problem, prefer quick find or quick add.
*/

// more find and less add:  把sum在add的时候算出来。space是O(n^2)

// lots of add and few find 
class TwoSum {
    Map<Integer, Integer> map;
    /** Initialize your data structure here. */
    public TwoSum() {
        map = new HashMap<>();
    }
    
    /** Add the number to an internal data structure.. */
    public void add(int number) {
        map.put(number, map.getOrDefault(number, 0) + 1);
    }
    
    /** Find if there exists any pair of numbers which sum is equal to the value. */
    public boolean find(int value) {
        for (int i : map.keySet()) {
            if (value - i == i && map.get(i) >= 2) {
                return true;
            } 
            if (value - i != i && map.containsKey(value - i)) {
                return true;
            }
        }
        return false;
    }
}

/**
 * Your TwoSum object will be instantiated and called as such:
 * TwoSum obj = new TwoSum();
 * obj.add(number);
 * boolean param_2 = obj.find(value);
 */
