## pq: minq
class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for (int num : nums) {
            pq.add(num);
            if (pq.size() > k) {
                pq.poll();
            }
        }
        return pq.peek();
    }
}

## quick select 
class Solution {
    public int findKthLargest(int[] nums, int k) {
        int start = 0;
        int end = nums.length - 1;
        k = nums.length - k;
        while (start < end) {
            int mid = partition(nums, start, end);
            if (mid < k) {
                start = mid + 1;
            } else if (mid > k) {
                end = mid - 1;
            } else {
                break;
            }
        }
        return nums[k];
    }
    private int partition(int[] nums, int lo, int hi) {
        int i = lo;
        int j = hi ;
        while (i <= j) {
            while (i <= j && nums[i] <= nums[lo]) {
                i++;
            }
            while (i <= j && nums[j] > nums[lo]) {
                j--;
            }
            if (i > j) {
                break;
            }
            swap(nums, i, j);
        }
        swap(nums, lo, j);
        return j;
    }
    private void swap(int[] nums, int i, int j) {
        int temp = nums[j];
        nums[j] = nums[i];
        nums[i] = temp;
    }
}

// quick select partition 版本
class Solution {
    public int findKthLargest(int[] nums, int k) {
        return helper(0, nums.length - 1, nums.length - k, nums);
    }
    private int helper(int s, int e, int k, int[] nums) {
        if (s >= e) {
            return nums[k];
        }
        int l = s;
        int r = e;
        int pivot = nums[s + (e - s) / 2];
        while (l <= r) {
            while (l <= r && nums[l] < pivot) {
                l++;
            }
            while (l <=r && nums[r] > pivot) {
                r--;
            }
            if (l <= r) {
                int tmp = nums[r];
                nums[r] = nums[l];
                nums[l] = tmp;
                l++;
                r--;
            }
        }
        if (r >= k) {
            return helper(s, r, k, nums);
        }
        if (l <= k) {
            return helper(l, e, k, nums);
        }
        return nums[k];
    }
}
