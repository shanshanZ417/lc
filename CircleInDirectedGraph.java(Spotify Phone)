// 拓展： 如果想把circle打出来。
// https://www.cnblogs.com/tenosdoit/p/3644225.html
// https://www.geeksforgeeks.org/print-all-the-cycles-in-an-undirected-graph/


// sol 1: dfs
/*
所有node dfs一直遍历下去，遇到visited的那肯定就是loop了。
方法直接粗暴，但是时间复杂度高。
*/
public class Main {
    public static void main(String[] args) {
        Main test = new Main();
        int n = 6;
        int[][] edges = new int[][]{{1,2}, {1,3}, {2,3}};
        // int[][] edges = new int[][]{{1,2}, {2,3}, {3,4}, {4,1}, {1,5}};
        int[][] graph = new int[n][n];
        for (int[] edge : edges) {
            int s = edge[0];
            int e = edge[1];
            graph[s][e] = 1;
        }
        boolean[] visited = new boolean[n];
        for (int i = 1; i < n; i++) {
            if (test.dfs(graph, i, visited, n)) {
                System.out.println("Hello World!");
            }
        }
    }
    private boolean dfs(int[][] graph, int n, boolean[] visited, int size) {
        visited[n] = true;
        for (int i = 1; i < size; i++) {
            if (graph[n][i] != 1) {
                continue;
            }
            if (visited[i]) {
                return true;
            }
            if (dfs(graph, i, visited, size)) {
                return true;
            }
        }
        visited[n] = false;
        return false;
    }
}

// topological
/*
如果图中有circle，肯定所有node的indegree都等于或1。
如果保证没有circle，肯定有个indegree为0的node开始，我们放到queue里面去。然后遍历neighbor，遍历到了就减少neighbor的indegree，如果变成0了，就再
放进queue。最后出来发现遍历过的visited数量==总共node的数量。说明这没有环。
*/
// "static void main" must be defined in a public class.
public class Main {
    public static void main(String[] args) {
        Main test = new Main();
        int n = 6;
        // int[][] edges = new int[][]{{1,2}, {1,3}, {2,3}};
        int[][] edges = new int[][]{{1,2}, {2,3}, {3,4}, {4,1}, {1,5}};
        int[][] graph = new int[n][n];
        int[] indegree = new int[n];
        for (int[] edge : edges) {
            int s = edge[0];
            int e = edge[1];
            graph[s][e] = 1;
            indegree[e]++;
        }
        Deque<Integer> queue = new LinkedList<>();
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                queue.offerLast(i);
            }
        }
        int visited = 0;
        while (!queue.isEmpty()) {
            int cur = queue.pollFirst();
            visited++;
            for (int i = 0; i < n; i++) {
                if (graph[cur][i] == 1) {
                    graph[cur][i] = 0;
                    indegree[i]--;
                    if (indegree[i] == 0) {
                        queue.offerLast(i);
                    }
                }
            }
        }
        if (visited != n) {
            System.out.println("Hello World!");
        }
    }
}
