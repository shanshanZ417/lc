/*
Map<Character, Integer> 
t 1
r 1
e 2
maxheap<Character> 
StringBuilder
O(klgk) + O(n) 
O(k) + O(n) = O(n)

List<int[ascii, freq]>
Collections.sort()

sort->optimized
*/

// sol2: bucket sort
class Solution {
    public String frequencySort(String s) {
        Map<Character, Integer> map = new HashMap<>();
        for (char c : s.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        List<Character>[] bucket = new List[s.length() + 1];
        for (char c : map.keySet()) {
            int freq = map.get(c);
            if (bucket[freq] == null) {
                bucket[freq] = new ArrayList<>();
            }
            bucket[freq].add(c);
        }
        StringBuilder sb = new StringBuilder();
        for (int i = bucket.length - 1; i >= 0; i--) {
            if (bucket[i] != null) {
                for (char c : bucket[i]) {
                    for (int j = 0; j < i; j++) {
                        sb.append(c);
                    }
                }
            }
        }
        return sb.toString();
    }
}

// sol1: hashtable + pq
class Solution {
    public String frequencySort(String s) {
        if (s == null || s.isEmpty()) {
            return "";
        }
        Map<Character, Integer> map = new HashMap<>();
        for (char c : s.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        PriorityQueue<Character> maxheap = new PriorityQueue<>((k1, k2) -> (map.get(k2) - map.get(k1)));
        for (char c : map.keySet()) {
            maxheap.offer(c);
        }
        StringBuilder sb = new StringBuilder();
        while (!maxheap.isEmpty()) {
            char cur = maxheap.poll();
            for (int i = 0; i < map.get(cur); i++) {
                sb.append(cur);
            }
        }
        return sb.toString();
    }
}
