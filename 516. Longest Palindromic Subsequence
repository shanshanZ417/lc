想不出来的，感觉像greedy的，可能是dp
求最大最小的，可能是dp
用dfs可以写的，但是又感觉会tle的，应该是dp
反正感觉没思路的，但又觉得不是所有其他的algo，大概率是dp
// dp
class Solution {
    public int longestPalindromeSubseq(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        int len = s.length();
        int[][] dp = new int[len][len];
        int max = 1;
        for (int i = len - 1; i >= 0; i--) {
            for (int j = i; j < len; j++) {
                if (i == j) {
                    dp[i][j] = 1;
                    continue;
                }
                if (s.charAt(i) == s.charAt(j)) {
                    dp[i][j] = 2 + dp[i + 1][j - 1];
                    max = Math.max(max, dp[i][j]);
                } else {
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }
        return max;
    }
}
// memo dfs
class Solution {
    public int longestPalindromeSubseq(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        int[][] len = new int[s.length()][s.length()];
        for (int[] l : len) {
            Arrays.fill(l, -1);
        }
        return dfs(s, 0, s.length() - 1, len);
    }
    private int dfs(String str, int s, int e, int[][] len) {
        if (e < s) {
            return 0;
        }
        if (e == s) {
            return 1;
        }
        if (len[s][e] != -1) {
            return len[s][e];
        }
        int cur = str.charAt(s) ==  str.charAt(e) ? 2 + dfs(str, s + 1, e - 1, len) : Math.max(dfs(str, s + 1, e, len), dfs(str, s, e - 1, len));
        len[s][e] = cur;
        return cur;
    }
}

// brute force dfs 进阶版 tle
class Solution {
    public int longestPalindromeSubseq(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        return dfs(s, 0, s.length() - 1);
    }
    private int dfs(String str, int s, int e) {
        if (e < s) {
            return 0;
        }
        if (e == s) {
            return 1;
        }
        return str.charAt(s) ==  str.charAt(e) ? 2 + dfs(str, s + 1, e - 1) : Math.max(dfs(str, s + 1, e), dfs(str, s, e - 1));
    }
}

// brute force dfs tle
class Solution {
    int max = 1;
    public int longestPalindromeSubseq(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        dfs(s, 0, "", new HashSet<>());
        return max;
    }
    private void dfs(String s, int index, String cur, Set<String> set) {
        if (index == s.length()) {
            if (set.contains(cur) || isPalindrome(cur)) {
                set.add(cur);
                max = Math.max(max, cur.length());
            }
            return;
        }
        dfs(s, index + 1, cur, set);
        dfs(s, index + 1, cur + s.charAt(index), set);
    }
    private boolean isPalindrome(String str) {
        int s = 0;
        int e = str.length() - 1;
        while (s <= e) {
            if (str.charAt(s++) != str.charAt(e--)) {
                return false;
            } 
        }
        return true;
    }
}
