// sol1 👍
// 最好不要传上一层的value到下一层，这样会让下一层的结果由上一层决定，不是很有必要。
class Solution {
    public int countUnivalSubtrees(TreeNode root) {
        int[] res = new int[1];
        helper(root, res);
        return res[0];
    }
    private boolean helper(TreeNode node, int[] res) {
        if (node == null) {
            return true;
        }
        boolean left = helper(node.left, res);
        boolean right = helper(node.right, res);
        if (node.left != null) {
            left = left && node.left.val == node.val;
        }
        if (node.right != null) {
            right = right && node.right.val == node.val;
        }
        if (right && left) {
            res[0]++;
        }
        return right && left;
    }
}

// sol2 
class Solution {
    int count = 0;
    public int countUnivalSubtrees(TreeNode root) {
        if (root == null) {
            return 0;
        }
        helper(root, root.val);
        return count;
    }
    private boolean helper(TreeNode root, int val) {
        if (root == null) {
            return true;
        }
        boolean left = helper(root.left, root.val);
        boolean right = helper(root.right, root.val);
        if (left && right) {
            count++;
        }
        return left && right && root.val == val;
    }
}
