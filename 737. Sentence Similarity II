// dfs
class Solution {
    public boolean areSentencesSimilarTwo(String[] words1, String[] words2, List<List<String>> pairs) {
        if (words1.length != words2.length) {
            return false;
        }
        Map<String, Set<String>> map = new HashMap<>();
        for (List<String> pair : pairs) {
            map.putIfAbsent(pair.get(0), new HashSet<>());
            map.putIfAbsent(pair.get(1), new HashSet<>());
            map.get(pair.get(0)).add(pair.get(1));
            map.get(pair.get(1)).add(pair.get(0));
        }
        for (int i = 0; i < words1.length; i++) {
            if (words1[i].equals(words2[i])) {
                continue;
            }
            if (dfs(words1[i], words2[i], map, new HashSet<String>())) {
                continue;
            }
            return false;
        }
        return true;
    }
    private boolean dfs(String start, String dest, Map<String, Set<String>> map, Set<String> visited) {
        if (!map.containsKey(start)) {
            return false;
        }
        if (map.get(start).contains(dest)) {
            return true;
        }
        visited.add(start);
        for (String str : map.get(start)) {
            if (!visited.contains(str) && dfs(str, dest, map, visited)) {
                return true;
            }
        }
        visited.remove(start);
        return false;
    } 
}
