// Sliding windows
/*
https://www.lintcode.com/problem/sliding-window-unique-elements-sum/description
Given an array and a window size that is sliding along the array, find the sum of the count of unique elements in each window.

Input:
[1, 2, 1, 3, 3]
3
Output: 5
Explanation:
First window [1, 2, 1], only 2 is unique, count is 1.
Second window [2, 1, 3], all elements unique, count is 3.
Third window [1, 3, 3], only 1 is unique, count is 1.
sum of count = 1 + 3 + 1 = 5

Notice
If the window size is larger than the length of array, just regard it as the length of the array (i.e., the window won't slide).

*/
public class Solution {
    public static void main(String[] args) {
        Solution test = new Solution();
        int[] nums = new int[]{1, 2, 1, 3, 3};
        int k = 3;
        System.out.println(test.slidingWindowUniqueElementsSum(nums, k));
    }
    public int slidingWindowUniqueElementsSum(int[] nums, int k) {
        Map<Integer, Integer> mapper = new HashMap<>();
        int sum = 0;
        int cur = 0;
        for (int i = 0; i < nums.length; i++) {
            mapper.put(nums[i], mapper.getOrDefault(nums[i], 0) + 1);
            if (mapper.get(nums[i]) == 1) {
                cur++;
            } else if (mapper.get(nums[i]) == 2) {
                cur--;
            }
            if (i >= k - 1) {
                sum += cur;
                mapper.put(nums[i - k + 1], mapper.get(nums[i - k + 1]) - 1);
                if (mapper.get(nums[i - k + 1]) == 0) {
                    cur--;
                } else if (mapper.get(nums[i - k + 1]) == 1) {
                    cur++;
                }
            }
        }
        return sum;
    }
}
