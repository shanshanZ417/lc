// Deque解法
class SnakeGame {
    
    /** Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */
    Set<Integer> visited;
    Deque<Integer> queue;
    int[][] food;
    int stage;
    Map<String, int[]> directions;
    int width;
    int height;
    int score;
    public SnakeGame(int width, int height, int[][] food) {
        queue = new LinkedList<>();
        queue.offerFirst(0);
        stage = 0;
        score = 0;
        this.width = width;
        this.height = height;
        this.food = food;
        visited = new HashSet<>();
        visited.add(0);
        directions = new HashMap<>();
        initial(directions);
    }
    private void initial(Map<String, int[]> directions) {
        directions.put("U", new int[]{-1, 0});
        directions.put("L", new int[]{0, -1});
        directions.put("R", new int[]{0, 1});
        directions.put("D", new int[]{1, 0});
    }
    
    /** Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body. */
    public int move(String direction) {
        if (score == -1) {
            return -1;
        }
        int[] d = directions.get(direction);
        int curX = queue.peekFirst() / width;
        int curY = queue.peekFirst() % width;
        int[] newPos = new int[]{d[0] + curX, d[1] + curY};
        int head = newPos[0] * width + newPos[1];
        visited.remove(queue.peekLast());
        if (!ifValid(newPos)) {
            return score = -1;
        } else {
            // else if valid & food -> add head at food & score & food stage
            // else if valid -> add head at food, & remove tail
            // visited.add(lastX * width + lastY);
            queue.offerFirst(head);
            visited.add(head);
            if (stage < food.length && newPos[0] == food[stage][0] && newPos[1] == food[stage][1]) {
                visited.add(queue.peekLast());
                stage++;
                score++;
            } else {
                queue.pollLast();
            }
        }
        return score;
    }
    private boolean ifValid(int[] pos) {
        if (pos[0] < 0 || pos[0] >= height || pos[1] < 0 || pos[1] >= width || visited.contains(pos[0] * width + pos[1])) {
            return false;
        }
        return true;
    }
}


// ListNode解法
class ListNode {
    int x;
    int y;
    ListNode next;
    ListNode prev;
    public ListNode (){
        next = null;
        prev = null;
    }
}
class SnakeGame {
    
    /** Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */
    ListNode head;
    ListNode tail;
    Set<Integer> visited;
    int[][] food;
    int stage;
    Map<String, int[]> directions;
    int width;
    int height;
    int score;
    public SnakeGame(int width, int height, int[][] food) {
        head = new ListNode();
        tail = new ListNode();
        ListNode start = new ListNode();
        start.x = 0;
        start.y = 0;
        head.next = start;
        start.prev = head;
        tail.prev = start;
        start.next = tail;
        stage = 0;
        score = 0;
        this.width = width;
        this.height = height;
        this.food = food;
        visited = new HashSet<>();
        visited.add(0);
        directions = new HashMap<>();
        initial(directions);
    }
    private void initial(Map<String, int[]> directions) {
        directions.put("U", new int[]{-1, 0});
        directions.put("L", new int[]{0, -1});
        directions.put("R", new int[]{0, 1});
        directions.put("D", new int[]{1, 0});
    }
    
    /** Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body. */
    public int move(String direction) {
        // if not valid, return -1
        int[] d = directions.get(direction);
        int[] newPos = new int[]{d[0] + head.next.x, d[1] + head.next.y};
        // System.out.println(newPos[0]);
        // System.out.println(newPos[1]);
        visited.remove(tail.prev.x * width + tail.prev.y);
        if (!ifValid(newPos)) {
            return -1;
        } else {
            // else if valid & food -> add head at food & score & food stage
            // else if valid -> add head at food, & remove tail
            visited.add(tail.prev.x * width + tail.prev.y);
            if (stage < food.length && newPos[0] == food[stage][0] && newPos[1] == food[stage][1]) {
                // System.out.println("yes");
                stage++;
                score++;
                addHead(newPos);
            } else {
                removeTail();
                addHead(newPos);
            }
        }
        return score;
    }
    private boolean ifValid(int[] pos) {
        if (pos[0] < 0 || pos[0] >= height || pos[1] < 0 || pos[1] >= width || visited.contains(pos[0] * width + pos[1])) {
            return false;
        }
        return true;
    }
    private void addHead(int[] pos) {
        ListNode newNode = new ListNode();
        newNode.x = pos[0];
        newNode.y = pos[1];
        visited.add(pos[0] * width + pos[1]);
        newNode.next = head.next;
        head.next.prev = newNode;
        head.next = newNode;
        newNode.prev = head;
    }
    private void removeTail() {
        ListNode prev = tail.prev;
        // System.out.println(prev.x);
        // System.out.println(prev.y);
        visited.remove(prev.x * width + prev.y);
        prev.prev.next = tail;
        tail.prev = prev.prev;
        prev.next = null;
        prev.prev = null;
    }
}

/**
 * Your SnakeGame object will be instantiated and called as such:
 * SnakeGame obj = new SnakeGame(width, height, food);
 * int param_1 = obj.move(direction);
 */
