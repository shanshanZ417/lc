// iterative 就是和preorder反过来，这个LinkedList addFirst的操作有点骚的
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        Deque<TreeNode> stack = new LinkedList<>();
        LinkedList<Integer> res = new LinkedList<>();
        while (root != null || !stack.isEmpty()) { 
            while (root != null) {
                res.addFirst(root.val);
                stack.offerLast(root);
                root = root.right;
            }
            root = stack.pollLast();
            root = root.left;
        }
        return res;
    }
}

// recursion
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        helper(root, res);
        return res;
    }
    private void helper(TreeNode root, List<Integer> res) {
        if (root == null) {
            return;
        }
        helper(root.left, res);
        helper(root.right, res);
        res.add(root.val);
    }
}
