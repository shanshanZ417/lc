// better two stack
class MinStack {

    /** initialize your data structure here. */
    Deque<Integer> stack;
    Deque<Integer> minstack;
    public MinStack() {
        stack = new LinkedList<>();
        minstack = new LinkedList<>();
    }
    public void push(int x) {
        stack.offerLast(x);
        if (minstack.isEmpty() || minstack.peekLast() >= x) {
            minstack.offerLast(x);
        }
    }
    public void pop() {
        if (stack.peekLast() == getMin()) {
            minstack.pollLast();
        }
        stack.pollLast();
    }
    public int top() {
        return stack.peekLast();
    }
    
    public int getMin() {
        return minstack.peekLast();
    }
}

// two stacks
class MinStack {
    Deque<Integer> stack1;
    Deque<Integer> stack2;
    /** initialize your data structure here. */
    public MinStack() {
        stack1 = new LinkedList<>();
        stack2 = new LinkedList<>();
    }
    
    public void push(int x) {
        stack1.offerLast(x);
        if (stack2.isEmpty()) {
            stack2.offerLast(x);
            return;
        }
        int min = Math.min(stack2.peekLast(), x);
        stack2.offerLast(min);
    }
    public void pop() {
        if (stack2.size() >= stack1.size()) {
            stack2.pollLast();
        }
        stack1.pollLast();
    }
    
    public int top() {
        if (stack1.isEmpty()) {
            return -1;
        }
        return stack1.peekLast();
    }
    
    public int getMin() {
        return stack2.peekLast();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
