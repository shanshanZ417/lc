// dfs combination
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> cur = new ArrayList<>();
        helper(candidates, 0, target, cur, res);
        return res;
    }
    private void helper(int[] candidates, int index, int target, List<Integer> cur, List<List<Integer>> res) {
        if (target == 0) {
            res.add(new ArrayList<>(cur));
            return;
        }
        for (int i = index; i < candidates.length; i++) {
            // 还是判断一下好，万一candidate还挺大的，而且都比target大，那其实加了挺多层的。
            if (candidates[i] <= target) {
                cur.add(candidates[i]);
                helper(candidates, i, target - candidates[i], cur, res);
                cur.remove(cur.size() - 1);
            }
        }
    }
}
