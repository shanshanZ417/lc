// trie
class TrieNode{
    public boolean isword;
    public TrieNode[] child;
    public TrieNode(){
        child = new TrieNode[26];
    }
}
class WordDictionary {
    TrieNode roots;
    /** Initialize your data structure here. */
    public WordDictionary() {
        roots = new TrieNode();      
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        char[] a = word.toCharArray();
        TrieNode root = roots;
        for (char c : a) {
            if (root.child[c - 'a'] == null) {
                root.child[c - 'a'] = new TrieNode();
            }
            root = root.child[c - 'a'];
        }
        root.isword = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        TrieNode root = roots;
        return match(word, 0, root);
    }
    private boolean match(String word, int index, TrieNode root) {
        if (index == word.length()) {
            return root.isword;
        }
        char c = word.charAt(index);
        if (c != '.') {
            if (root.child[c - 'a'] == null){
                return false;
            }
            return match(word, index + 1, root.child[c - 'a']);
        }
        for (TrieNode kid : root.child) {
            if (kid != null && match(word, index + 1, kid)) {
                return true;
            }
        }
        return false;
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
