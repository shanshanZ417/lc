/*
preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
index 2
s 2 
e 4
mid 3
node 3.left = helper(1, 0, 0) = 9
     3.right = helper(2, 2, 4)
          node 20.left = helper(3, 2, 2) = 15
               20.right = helper(4, 4, 4) = 7
*/


class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return helper(preorder, inorder, 0, 0, inorder.length - 1);
    }
    private TreeNode helper(int[] preorder, int[] inorder, int index, int s, int e) {
        // base case
        if ( s > e) {
            return null;
        }
        TreeNode node = new TreeNode(preorder[index]);
        int mid = 0;
        for (int i = s; i <= e; i++) {
            if (inorder[i] == preorder[index]) {
                mid = i;
                break;
            }
        }
        node.left = helper(preorder, inorder, index + 1, s, mid - 1);
        node.right = helper(preorder, inorder, index + 1 + (mid - s), mid + 1, e);
        return node;
    }
}
