// heap 遇到median的问题，想到用minheap&maxheap去联合解决
class Solution {
    public double[] medianSlidingWindow(int[] nums, int k) {
        PriorityQueue<Integer> maxheap = new PriorityQueue<>(Collections.reverseOrder());
        PriorityQueue<Integer> minheap = new PriorityQueue<>();
        double[] res = new double[nums.length - k + 1];
        int index = 0;
        for (int i = 0; i < nums.length; i++) {
            addNumber(nums[i], maxheap, minheap);
            if (i >= k - 1) {
                double tmp = getMedian(maxheap, minheap);
                res[index++]  = tmp;
                if (nums[i - k + 1] <= tmp) {
                    maxheap.remove(nums[i - k + 1]);
                } else {
                    minheap.remove(nums[i - k + 1]);
                }
            }
        }
        return res;
    }
    private void addNumber(int num, PriorityQueue<Integer> maxheap, PriorityQueue<Integer> minheap) {
        maxheap.offer(num);
        minheap.offer(maxheap.poll());
        if (minheap.size() > maxheap.size()) {
            maxheap.offer(minheap.poll());
        }
    }
    private double getMedian(PriorityQueue<Integer> maxheap, PriorityQueue<Integer> minheap) {
        if (maxheap.size() == minheap.size()) {
            return ((double)maxheap.peek() +(double) minheap.peek()) / 2.0;
        }
        return (double)maxheap.peek();
    }
}
