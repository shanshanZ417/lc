// dp

// memo + recursion
class Solution {
    public boolean isScramble(String s1, String s2) {
        if (s1.length() != s2.length()) {
            return false;
        }
        Map<String, Boolean> memo = new HashMap<>();
        return isScramble(s1, s2);
     }
    private boolean isScramble(String s1, String s2, Map<String, Boolean> memo) {
        if (s1.equals(s2)) {
            return true;
        }
        if (memo.containsKey(s1 + s2)) {
            return memo.get(s1 + s2);
        }
        int len = s1.length();
        for (int i = 1; i < len; i++) {
            boolean nonSwap = isScramble(s1.substring(0, i), s2.substring(0, i), memo) &&  isScramble(s1.substring(i, len), s2.substring(i, len), memo);
            if (nonSwap) {
                memo.put(s1 + s2, true);
                return true;
            }
            boolean swap = isScramble(s1.substring(0, i), s2.substring(len - i, len), memo) &&  isScramble(s1.substring(i, len), s2.substring(0, len - i), memo);
            if (swap) {
                memo.put(s1 + s2, true);
                return true;
            }
        }
        memo.put(s1 + s2, false);
        return false;
    }
}
