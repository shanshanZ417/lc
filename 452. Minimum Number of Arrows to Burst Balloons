/*
 We should shoot as to the right as possible, because since balloons are sorted,
 this gives you the best chance to take down more balloons. Therefore the position should always be balloon[i][1] for the ith balloon.

This is exactly what I do in the for loop: 
check how many balloons I can shoot down with one shot aiming at the ending position of the current balloon. 
Then I skip all these balloons and start again from the next one (or the leftmost remaining one) that needs another arrow.
*/
// greedy 
class Solution {
    public int findMinArrowShots(int[][] points) {
        if (points == null || points.length == 0) {
            return 0;
        }
        Arrays.sort(points, (p1, p2) -> (p1[1] - p2[1]));
        int count = 1;
        int end = points[0][1];
        for (int i = 1; i < points.length; i++) {
            if (points[i][0] > end) {
                count++;
                end = points[i][1];
            }
        }
        return count;
    }
}
