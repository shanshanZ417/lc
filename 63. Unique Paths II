/*
最后一步&子问题
from A[m - 2][n - 1] & A[m - 1][n] to A[m - 1][n - 1]

transistion 
f[m - 1][n - 1] = f[m - 2][n - 1] + f[m - 1][n];
f[i][j] = 0 if A[i][j] is obstacle

初始值&边界
f[0][0] = 1;


transition
*/
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] uniquePath = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (obstacleGrid[i][j] == 1) {
                    uniquePath[i][j] = 0;
                    continue;
                }
                if (i == 0 && j == 0) {
                    uniquePath[i][j] = 1;
                } else if (i == 0) {
                    uniquePath[i][j] = uniquePath[i][j - 1];
                } else if (j == 0){
                    uniquePath[i][j] = uniquePath[i - 1][j];
                } else {
                    uniquePath[i][j] = uniquePath[i - 1][j] + uniquePath[i][j - 1];
                }
            }
        }
        return uniquePath[m - 1][n - 1];
    }
}
