// 2 pass dp
class Solution {
    public int rob(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        if (nums.length <= 2) {
            return Math.max(nums[0], (nums.length == 1 ? 0 : nums[1]));
        }
        int[] dpWithoutFirst = new int[nums.length];
        dpWithoutFirst[0] = 0;
        // do not rob 1
        for (int i = 1; i < nums.length; i++) {
            if (i == 1) {
                dpWithoutFirst[i] = Math.max(dpWithoutFirst[i - 1], nums[i]);
                continue;
            }
            dpWithoutFirst[i] = Math.max(dpWithoutFirst[i - 1], dpWithoutFirst[i - 2] + nums[i]); 
        }
        // rob 1
        int[] dpWithFirst = new int[nums.length];
        dpWithFirst[0] = nums[0];
        for (int i = 1; i < nums.length - 1; i++) {
            if (i == 1) {
                dpWithFirst[i] = Math.max(dpWithFirst[i - 1], nums[i]);
                continue;
            }
            dpWithFirst[i] = Math.max(dpWithFirst[i - 1], dpWithFirst[i - 2] + nums[i]); 
        }
        
        return Math.max(dpWithoutFirst[nums.length - 1], dpWithFirst[nums.length - 2]);
    }
}
