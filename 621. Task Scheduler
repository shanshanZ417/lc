// greedy + pq
class Solution {
    public int leastInterval(char[] tasks, int n) {
        PriorityQueue<int[]> maxheap = new PriorityQueue<>((t1, t2) -> t2[1] - t1[1]);
        int[] mapper = new int[26]; 
        for (char c : tasks) {
            mapper[c - 'A']++;
        }
        for (int i = 0; i < mapper.length; i++) {
            if (mapper[i] == 0) {
                continue;
            }
            maxheap.offer(new int[]{i, mapper[i]});
        }
        int res = 0;
        while (!maxheap.isEmpty()) {
            int num = n + 1;
            List<int[]> list = new ArrayList<>();
            while (num > 0 && !maxheap.isEmpty()) {
                int[] cur = maxheap.poll();
                // System.out.println(cur.name);
                cur[1]--;
                if (cur[1] > 0) {
                    list.add(cur);
                }
                num--;
                res++;
                // System.out.println(res);
            }
            for (int[] t : list) {
                maxheap.offer(t);
            }
            if (!maxheap.isEmpty()) {res += num;}
            // System.out.println("here " + res);

        }
        return res;
    }
}

// sol2: math 太牛批了 实际上我们不在最后插入顺序是什么，我们只在乎数量。解析在下方comment
class Solution {
    public int leastInterval(char[] tasks, int n) {
        int[] mapper = new int[26];
        int max = 0;
        int mostTaskNum = 0;
        for (char c : tasks) {
            mapper[c - 'A']++;
            if (mapper[c - 'A'] > max) {
                max = mapper[c - 'A'];
                mostTaskNum = 1;
            } else if (mapper[c - 'A'] == max) {
                mostTaskNum++;
            }
        }
        int slotLen = n + 1 - mostTaskNum;
        int slotNumber = max - 1;
        int emptyPlace = slotNumber * slotLen;
        int remainingTask = tasks.length - mostTaskNum * max;
        int idle = Math.max(0, emptyPlace - remainingTask);
        return idle + tasks.length;
    }
}


/*
AxxAxxA
max = l;
mostTaskNum = m;
slotLen = n + 1 - m;
slotNumber = l - 1;
emptyPlace = slotNumber * slotLen;
if (remainingTask < emptyPlace) {
    idle =  emptyPlace - remainingTask;
} else {
    idle = 0;
}
TotalTime = numberOfTask + idelTime

*/


