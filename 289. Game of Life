// 生命游戏 阅读材料： https://www.ituring.com.cn/book/miniarticle/6741

// follow up 2: infinit board -> the area is too large to stored in the memory. 
// In other word, it cannot be represented as a 2D array
/* 真的牛批
What I do is I have the coordinates of all living cells in a set. 
Then I count the living neighbors of all cells by going through the living cells and increasing the counter of their neighbors 
(thus cells without living neighbor will not be in the counter). 
Afterwards I just collect the new set of living cells by picking those with the right amount of neighbors. 
*/
private Set<Coord> gameOfLife(Set<Coord> live) {
        Map<Coord,Integer> neighbours = new HashMap<>();
        for (Coord cell : live) {
            for (int i = cell.i-1; i<cell.i+2; i++) {
                for (int j = cell.j-1; j<cell.j+2; j++) {
                    if (i==cell.i && j==cell.j) continue;
                    Coord c = new Coord(i,j);
                    if (neighbours.containsKey(c)) {
                        neighbours.put(c, neighbours.get(c) + 1);
                    } else {
                        neighbours.put(c, 1);
                    }
                }
            }
        }
        Set<Coord> newLive = new HashSet<>();
        for (Map.Entry<Coord,Integer> cell : neighbours.entrySet())  {
            if (cell.getValue() == 3 || cell.getValue() == 2 && live.contains(cell.getKey())) {
                newLive.add(cell.getKey());
            }
        }
        return newLive;
    }
 public void gameOfLife(int[][] board) {
        Set<Coord> live = new HashSet<>();
        int m = board.length;
        int n = board[0].length;
        for (int i = 0; i<m; i++) {
            for (int j = 0; j<n; j++) {
                if (board[i][j] == 1) {
                    live.add(new Coord(i,j));
                }
            }
        };
        live = gameOfLife(live);
        for (int i = 0; i<m; i++) {
            for (int j = 0; j<n; j++) {
                board[i][j] = live.contains(new Coord(i,j))?1:0;
            }
        };
        
    }

// follow up 1: in place
// 用1，2，3表示不同状态，最后%2. 跟bit manipulation是一样的思路，更容易懂。
class Solution {
    public void gameOfLife(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        boolean[][] grid = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int lives = findLife(i, j, m, n, board);
                if (board[i][j] == 1 && (lives < 2 || lives > 3)) {
                    board[i][j] = 2;
                }
                if (board[i][j] == 0 && lives == 3) {
                    board[i][j] = 3;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = board[i][j] % 2;
            }
        }
    }
    private int findLife(int x, int y, int m, int n, int[][] board) {
        int[] xDir = {0, 0, 1, 1, 1, -1, -1, -1};
        int[] yDir = {1, -1, 0, 1, -1, 0, 1, -1};
        int count = 0;
        for (int i = 0; i < 8; i++) {
            int newX = xDir[i] + x;
            int newY = yDir[i] + y;
            if (newX < 0 || newX >= m || newY < 0 || newY >= n) {
                continue;
            }
            if (board[newX][newY] == 1 || board[newX][newY] == 2) {
                count++;
            }
        }
        return count;
    }
}

// not in place
class Solution {
    public void gameOfLife(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        boolean[][] grid = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int lives = findLife(i, j, m, n, board);
                if (board[i][j] == 1) {
                    if (lives < 2 || lives > 3) {
                        grid[i][j] = true;
                    }
                }
                if (board[i][j] == 0 && lives == 3) {
                    grid[i][j] = true;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j]) {
                    board[i][j] = board[i][j] == 1 ? 0 : 1;
                }
            }
        }
    }
    private int findLife(int x, int y, int m, int n, int[][] board) {
        int[] xDir = {0, 0, 1, 1, 1, -1, -1, -1};
        int[] yDir = {1, -1, 0, 1, -1, 0, 1, -1};
        int count = 0;
        for (int i = 0; i < 8; i++) {
            int newX = xDir[i] + x;
            int newY = yDir[i] + y;
            if (newX < 0 || newX >= m || newY < 0 || newY >= n) {
                continue;
            }
            if (board[newX][newY] == 1) {
                count++;
            }
        }
        return count;
    }
}

