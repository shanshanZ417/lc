// uf
class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int[] parents = new int[graph.length];
        int len = parents.length;
        for (int i = 0; i < len; i++) {
            parents[i] = i;
        }
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < len; j++) {
                if (i != j && graph[i][j] == 1) {
                    int p1 = find(i, parents);
                    int p2 = find(j, parents);
                    if (p1 != p2) {
                        parents[p1] = p2;
                    }
                }
            }
        }
        Map<Integer, Integer> area = new HashMap<>();
        for (int p : parents) {
            int parent = find(p, parents);
            area.put(parent, area.getOrDefault(parent, 0) + 1);
        }
        Arrays.sort(initial);
        int[] vals = new int[initial.length];
        int max = 0;
        for (int i = 0; i < initial.length; i++) {
            vals[i] = area.get(find(initial[i], parents));
            max = Math.max(vals[i], max);
        }
        for (int i = 0; i < initial.length; i++) {
            if (vals[i] == max) {
                return initial[i];
            }
        }
        return -1;
    }
    private int find(int node, int[] parents){
        int x = node;
        while (x != parents[x]) {
            x = parents[x];
        }
        while (node != x) {
            int p = parents[node];
            parents[node] = x;
            node = p;
        }
        return node;
    }
}
