// dfs with memorilization
class Solution {
    public boolean isMatch(String s, String p) {
        int sLen = s.length() ;
        int pLen = p.length(); 
        boolean[][] visisted = new boolean[sLen][pLen];
        boolean[][] memory = new boolean[sLen][pLen];
        return helper(s, p, 0, 0, visisted, memory);
    }
    private boolean helper(String s, String p, int indexS, int indexP, boolean[][] visited, boolean[][] memory) {
        if (indexP == p.length()) {
            return indexS == s.length();
        }
        if (indexS == s.length()) {
            while (indexP < p.length() - 1) {
                if (p.charAt(indexP + 1) == '*') {
                    indexP += 2;
                } else {
                    return false;
                }
            }
            return indexP == p.length();
        }
        boolean match = false;
        if (indexP < p.length() - 1 && p.charAt(indexP + 1) == '*') {
            if ( p.charAt(indexP) == '.') {
                match = helper(s, p, indexS, indexP + 2, visited, memory) || helper(s, p, indexS + 1, indexP, visited, memory);
            } else {
                match = helper(s, p, indexS, indexP + 2, visited, memory) || ((s.charAt(indexS) == p.charAt(indexP)) && helper(s, p, indexS + 1, indexP, visited, memory));
            }
        } else if ( p.charAt(indexP) == '.') {
            match = helper(s, p, indexS + 1, indexP + 1, visited, memory);
        } else {
            match = (s.charAt(indexS) == p.charAt(indexP)) && helper(s, p, indexS + 1, indexP + 1, visited, memory);
        }
        visited[indexS][indexP] = true;
        memory[indexS][indexP] = match;
        return match;
    }
}
