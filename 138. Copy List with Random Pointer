// clone with LinkedList then re-construct -> constant space O(1)
class Solution {
    public Node copyRandomList(Node head) {
        Node dummy = head;
        while(head != null) {
            Node next = head.next;
            Node node = new Node(head.val);
            head.next = node;
            node.next = next;
            head = next;
        }
        head = dummy;
        while (head != null) {
            Node next = head.next.next;
            if (head.random != null) {
                head.next.random = head.random.next;
            }
            head = next;
        }
        head = dummy;
        Node newHead = new Node(0);
        Node res = newHead;
        while (head != null) {
            Node next = head.next.next;
            newHead.next = head.next;
            newHead =  newHead.next;
            head.next = next;
            head = next;
        }
        return res.next;
    }
}

// clone with HashMap O(n)
class Solution {
    public Node copyRandomList(Node head) {
        Map<Node, Node> map = new HashMap<>();
        Node dummy = head;
        while (head != null) {
            Node node = new Node(head.val);
            map.put(head, node);
            head = head.next;
        }
        for (Node n : map.keySet()) {
            map.get(n).next = map.get(n.next);
            map.get(n).random = map.get(n.random);
        }
        return map.get(dummy);
    }
}
