// topological sort 用hashmap
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int[] indegree = new int[numCourses];
        Map<Integer, List<Integer>> out = new HashMap<>();
        for (int[] p : prerequisites) {
            indegree[p[0]]++;
            List<Integer> vals = out.get(p[1]);
            if (vals == null) {
                out.put(p[1], new ArrayList<>());
            }
            out.get(p[1]).add(p[0]);
        }
        Deque<Integer> queue = new LinkedList<>();
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                queue.offerLast(i);
            }
        }
        int count = 0;
        while (!queue.isEmpty()){
            Integer cur = queue.pollFirst();
            count++;
            List<Integer> outList = out.get(cur);
            if (outList != null) {
                for (Integer next : outList) {
                    indegree[next]--;
                    if (indegree[next] == 0) {
                        queue.offerLast(next);
                    }
                }   
            }
        }
        return count == numCourses;
    }
}

// 用int[][]版本。
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int[] indegree = new int[numCourses];
        int[][] out = new int[numCourses][numCourses];
        for (int[] p : prerequisites) {
            indegree[p[0]]++;
            out[p[1]][p[0]] = 1;
        }
        Deque<Integer> queue = new LinkedList<>();
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                queue.offerLast(i);
            }
        }
        int count = 0;
        while (!queue.isEmpty()){
            Integer cur = queue.pollFirst();
            count++;
            for (int i = 0; i < numCourses; i++) {
                if (out[cur][i] == 1) {
                    indegree[i]--;
                    // 判断这个的地方比较tricky必须在前一个if block里面
                    if (indegree[i] == 0) {
                        queue.offerLast(i);
                    }
                }
            }
        }
        return count == numCourses;
    }
}
