// combination based DFS
class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> cur = new ArrayList<>();
        helper(s, 0, cur, res);
        return res;
    }
    private void helper(String s, int index, List<String> cur, List<List<String>> res) {
        if (index == s.length()) {
            res.add(new ArrayList<>(cur));
            return;
        }
        for (int i = index; i < s.length(); i++) {
            if (isPalindrome(s, index, i)) {
                cur.add(s.substring(index, i + 1));
                helper(s, i + 1, cur, res);
                cur.remove(cur.size() - 1);
            }
        }
    }
    private boolean isPalindrome(String str, int s, int e) {
        while (s < e) {
            if (str.charAt(s++) != str.charAt(e--)) {
                return false;
            }
        }
        return true;
        
    }
}


// optimization: dp先计算出来palindrome的boolean数组
class Solution {
    public List<List<String>> partition(String s) {
        boolean[][] isPalindrom = findPalindrom(s);
        List<List<String>> res = new ArrayList<>();
        List<String> cur = new ArrayList<>();
        helper(s, 0, cur, res, isPalindrom);
        return res;
    }
    private void helper(String s, int index, List<String> cur, List<List<String>> res, boolean[][] isPalindrom) {
        if (index == s.length()) {
            res.add(new ArrayList<>(cur));
            return;
        }
        for (int i = index; i < s.length(); i++) {
            if (isPalindrom[index][i]) {
                cur.add(s.substring(index, i + 1));
                helper(s, i + 1, cur, res, isPalindrom);
                cur.remove(cur.size() - 1);
            }
        }
    }
    private boolean[][] findPalindrom(String s) {
        int n = s.length();
        boolean[][] isPalindrom = new boolean[n][n];
        for (int i = 0; i < n; i++) {
            isPalindrom[i][i] = true;
        }
        for (int i = 0; i < n - 1; i++) {
            isPalindrom[i][i + 1] = (s.charAt(i) == s.charAt(i + 1));
        }
        for (int i = n - 3; i >= 0; i--) {
            for (int j = i + 2; j < n; j++) {
                isPalindrom[i][j] = isPalindrom[i + 1][j - 1] && (s.charAt(i) == s.charAt(j));
            }
        }
        return isPalindrom;
    }
}

// 我真牛逼再写一遍还是最优解，因为下面思路很对。
// all posibility -> visited -> dfs with memo 
// how to record visit -> go through -> boolean[i][j] = boolean[i + 1][j - 1] && (str[i] == str[j])
// how to dfs -> 2^n
class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        boolean[][] isPalindrome = findPalindrom(s);
        helper(s, 0, isPalindrome, new ArrayList<>(), res);
        return res;
    }
    private void helper(String s, int index, boolean[][] isPalindrome, List<String> cur, List<List<String>> res) {
        if (index == s.length()) {
            res.add(new ArrayList<>(cur));
            return;
        }
        for (int i = index; i < s.length(); i++) {
            if (isPalindrome[index][i]) {
                cur.add(s.substring(index, i + 1));
                helper(s, i + 1, isPalindrome, cur, res);
                cur.remove(cur.size() - 1);
            }
        }
    }
    private boolean[][] findPalindrom(String s) {
        int len = s.length();
        boolean[][] isPalindrome = new boolean[len][len];
        for (int i = 0; i < len; i++) {
            for (int j = 0; j <= i; j++) {
                if (i == j) {
                    isPalindrome[i][j] = true;
                } else if (j + 1 == i) {
                    if (s.charAt(i) == s.charAt(j)) {
                        isPalindrome[j][i] = true;
                    }
                } else {
                    if (s.charAt(i) == s.charAt(j) && isPalindrome[j + 1][i - 1]) {
                        isPalindrome[j][i] = true;
                    }
                }
            }
        }
        return isPalindrome;
    }
}
