/*
Given an array nums of integers and an int k, partition the array (i.e move the elements in "nums") such that:

All elements < k are moved to the left
All elements >= k are moved to the right
Return the partitioning index, i.e the first index i nums[i] >= k.
*/
/*
[1, 3, 4, 2, 6, 2] k = 3
[1, 2, 2]
[3, 4, 6]
O(n) space 
O(2n) time

[0, i) < k
(j, len - 1] >= k
[i, j] unexplored elements
[1, 2, 2, 4, 6, 3]
          i
       j
O(1) space
O(n)
*/
public class Main {
    public static void main(String[] args) {
        Main test = new Main();
        int[] nums = {1, 2, 2, 4, 6, 3};
        System.out.println(test.partition(nums, 3));
        for (int i : nums) {
            System.out.print(i);  
        }

    }
    private int partition(int[] nums, int k) {
        if (nums == null || nums.length == 0) {
            return -1;
        }
        int s = 0;
        int e = nums.length - 1;
        while (s <= e) {
            if (nums[s] < k) {
                s++;
                continue;
            } 
            if (nums[e] >= k) {
                e--;
                continue;
            }
            swap(nums, s, e);
            s++;
            k--;
        }
        return s;
    }
    private void swap(int[] nums, int s, int e) {
        int temp = nums[s];
        nums[s] = nums[e];
        nums[e] = temp;
    }
}

// tips: #1 while里面能不套while就不套 #2 while loop里面的条件想清楚，几个corner case。null， size 1， size 2， 一直加，一直减
// 正常的。都考虑能不能handle
