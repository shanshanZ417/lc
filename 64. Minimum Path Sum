// sol2 路径压缩大法（虽然在这里第二个更optimize space complixity）
class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] path = new int[2][n];
        int prev = 0;
        int now = 0;
        for (int i = 0; i < m; i++) {
            prev = now;
            now = 1 - now;
            for (int j = 0; j < n; j++) {
                if (i == 0 && j == 0) {
                    path[now][j] = grid[0][0]; 
                    continue;
                }
                if (i == 0) {
                    path[now][j] = grid[i][j] + path[now][j - 1];
                } else if (j == 0) {
                    path[now][j] = grid[i][j] + path[prev][j];
                } else {
                    path[now][j] = grid[i][j] + Math.min(path[prev][j], path[now][j - 1]);
                }
            }
        }
        return path[now][n - 1];
    }
}

// sol1
class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 && j == 0) {
                    continue;
                }
                if (i == 0) {
                    grid[i][j] = grid[i][j] + grid[i][j - 1];
                } else if (j == 0) {
                    grid[i][j] = grid[i][j] + grid[i - 1][j];
                } else {
                    grid[i][j] = grid[i][j] + Math.min(grid[i - 1][j], grid[i][j - 1]);
                }
            }
        }
        return grid[m - 1][n - 1];
    }
}
