// sol1: recursion
// 看到tree想到每一层做的事情都一样，从而得到recursion
// 我最开始写的时候是用了新的node，其实直接在其中一个tree上edit就可以了，没有的branch会直接被返回的l2的subtree取代，比我的想法高明不少。
class Solution {
    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
        if (t1 == null || t2 == null) {
            return t1 == null ? t2 : t1;
        }
        t1.val += t2.val;
        t1.left = mergeTrees(t1.left, t2.left);
        t1.right = mergeTrees(t1.right, t2.right);
        return t1;
    }
}

//sol2: iterative 也可以合成一个stack<TreeNode[]>
class Solution {
    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
        if (t1 == null || t2 == null) {
            return t1 == null ? t2 : t1;
        }
        Deque<TreeNode> stack1 = new LinkedList<>();
        Deque<TreeNode> stack2 = new LinkedList<>();
        TreeNode res = t1;
        while (t1 != null && t2 != null || !stack1.isEmpty() && !stack2.isEmpty()) {
            while (t1 != null && t2 != null) {
                stack1.offerLast(t1);
                stack2.offerLast(t2);
                t1 = t1.left;
                t2 = t2.left;
            }
            TreeNode cur1 = stack1.pollFirst();
            TreeNode cur2 = stack2.pollFirst();
            cur1.val += cur2.val;
            if (cur1.left == null) {
                cur1.left = cur2.left;
            }
            if (cur1.right == null) {
                cur1.right = cur2.right;
            } else {
                t1 = cur1.right;
                t2 = cur2.right;
            }
        }
        return res;
    } 
}
