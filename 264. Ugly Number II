// minheap
class Solution {
    public int nthUglyNumber(int n) {
        PriorityQueue<Long> minheap = new PriorityQueue<>();
        minheap.offer(1L);
        for (int i = 1; i < n; i++) {
            long cur = minheap.poll();
            while (!minheap.isEmpty() && minheap.peek() == cur) {
                minheap.poll();
            }
            minheap.offer(cur * 2);
            minheap.offer(cur * 3);
            minheap.offer(cur * 5);
        }
        return minheap.poll().intValue();
    }
}

// k-way merge, k pointer
class Solution {
    public int nthUglyNumber(int n) {
        int factor2 = 2;
        int factor3 = 3;
        int factor5 = 5;
        int index2 = 0;
        int index3 = 0;
        int index5 = 0;
        int index = 1;
        int[] ugly = new int[n];
        ugly[0] = 1;
        while (index < n) {
            int cur = Math.min(Math.min(factor2, factor3), factor5);
            ugly[index++] = cur;
            if (factor2  == cur) {
                factor2 = 2 * ugly[++index2];
            }
            if (factor3  == cur) {
                factor3 = 3 * ugly[++index3];
            }
            if (factor5  == cur) {
                factor5 = 5 * ugly[++index5];
            }
        }
        return ugly[n - 1];
    }
}
