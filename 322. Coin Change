// dp 【我日 dp转换成dfs+memorilization我根本他妈的搞不懂】
class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, amount + 1);
        dp[0] = 0;
        for (int i = 1; i <= amount; i++) {
            for (int c : coins) {
                if (c <= i) {
                    dp[i] = Math.min(dp[i], dp[i - c] + 1);
                }
            }
        }
        return dp[amount] == amount + 1 ? -1 : dp[amount];
    }
}

// dfs+memorilization 还是不太懂
class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] memo = new int[amount + 1];
        Arrays.fill(memo, amount + 1);
        memo[0] = 0;
        return dfs(coins, amount, memo,  amount + 1);
    }
    private int dfs(int[] coins, int rest, int[] memo, int total) {
        if (rest < 0) {
            return -1;
        }
        if (rest == 0) {
            return 0;
        }
        if (memo[rest] != total) {
            return memo[rest];
        }
        int min = Integer.MAX_VALUE;
        for (int c : coins) {
            int num = dfs(coins, rest - c, memo, total);
            if (num >= 0) {
                memo[rest] = Math.min(memo[rest], num + 1);
            }
        }
        memo[rest] = (memo[rest] == total) ? -1 : memo[rest];
        return memo[rest];
    }
}

// 最开始写的tle版本，我觉得不用sort也可以
class Solution {
    int min = Integer.MAX_VALUE;
    public int coinChange(int[] coins, int amount) {
        Arrays.sort(coins);
        helper(coins, coins.length - 1, 0, amount);
        return min == Integer.MAX_VALUE ? -1 : min; 
    }
    private void helper(int[] coins, int index, int count, int rest) {
        if (rest <= 0 || index == -1) {
            if (rest == 0) {
                min = Math.min(min, count);
            }
            return;
        }
        for (int i = index; i >= 0; i--) {
            for (int j = rest / coins[i]; j >= 1; j--) {
                helper(coins, index - 1, count + j, rest - j * coins[i]);
            }
        }
    }
}
