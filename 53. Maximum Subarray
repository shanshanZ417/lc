/*  
[-2,1,-3,4,-1,2,1,-5,4]
sol1:
O(n^2)

sol2:
O(n^2)
subarraySum

sol3:
*/
class Solution {
    public int maxSubArray(int[] nums) {
        int max = nums[0];
        int preSubsum = nums[0];
        for (int i = 1; i < nums.length; i++) {
            preSubsum = preSubsum < 0 ? nums[i] : nums[i] + preSubsum;
            max = Math.max(max, preSubsum);
        }
        return max;
    }
}

其实因为dp只用dp[i - 1]所以用一个常数存就可以了
class Solution {
    public int maxSubArray(int[] nums) {
        int len = nums.length;
        int[] dp = new int[len];
        dp[0] = nums[0];
        int max = nums[0];
        for (int i = 1; i < len; i++) {
            dp[i] = Math.max(nums[i], dp[i - 1] + nums[i]);
            max = Math.max(dp[i], max);
        }
        return max;
    }
}
