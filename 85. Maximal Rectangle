// monotonous stack
class Solution {
    public int maximalRectangle(char[][] matrix) {
        if (matrix ==  null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }
        int m = matrix.length;
        int n = matrix[0].length;
        int[] h = new int[n + 1];
        Deque<Integer> stack;
        int max = 0;
        for (int i = 0; i < m; i++) {
            stack = new LinkedList<>();
             // System.out.println("here");
            for (int j = 0; j < n; j++) {
                h[j] = matrix[i][j] == '0' ? 0 : h[j] + 1;
                // System.out.println(h[j]);
            }
            for (int j = 0; j < n + 1; j++) {
                while (!stack.isEmpty() && h[stack.peekLast()] >= h[j]) {
                    int height = h[stack.pollLast()];
                    int index = stack.isEmpty() ? -1 : stack.peekLast();
                    max = Math.max(max, height * (j - index - 1));
                }
                stack.offerLast(j);
            }
        }
        return max;
    }
}
