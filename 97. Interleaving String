// memo + dfs
class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        if (s1.length() + s2.length() != s3.length()) {
            return false;
        }
        boolean[][] memo = new boolean[s1.length() + 1][s2.length() + 1];
        return dfs(0, 0, 0, s1.toCharArray(), s2.toCharArray(), s3.toCharArray(), memo);
    }
    private boolean dfs(int index1, int index2, int index3, char[] s1, char[] s2, char[] s3, boolean[][] memo) {
        if (index3 == s3.length) {
            return true;
        }
        if (memo[index1][index2]) {
            return false;
        }
        boolean res = (index1 < s1.length && s1[index1] == s3[index3] && dfs(index1 + 1, index2, index3 + 1, s1, s2, s3, memo)) || (index2 < s2.length && s2[index2] == s3[index3] &&  dfs(index1, index2 + 1, index3 + 1, s1, s2, s3, memo));
        memo[index1][index2] = true;
        return res;
    }
}

// dp
class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        if (s1.length() + s2.length() != s3.length()) {
            return false;
        }
        boolean[][] memo = new boolean[s1.length() + 1][s2.length() + 1];
        memo[0][0] = true;
        for (int i = 1; i < s1.length() + 1; i++) {
            memo[i][0] = memo[i - 1][0] && s1.charAt(i - 1) == s3.charAt(i - 1);
        }
        for (int i = 1; i < s2.length() + 1; i++) {
            memo[0][i] = memo[0][i - 1] && s2.charAt(i - 1) == s3.charAt(i - 1);
        }
        for (int i = 1; i < s1.length() + 1; i++) {
            for (int j = 1; j < s2.length() + 1; j++) {
                memo[i][j] = (memo[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) || (memo[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));
            }
        }
        return memo[s1.length()][s2.length()];
    }
}
