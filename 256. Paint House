/*
final state&sub questions
paint last house
the minimum cost of paining n - 1 house

transition 
f[i] = Math.min(costs[i][j != last color] + f[i - 1]);

initial state & corner case
paint first house 
所有color


ordering 
*/
// sol1 : 直接用2d就可以
class Solution {
    public int minCost(int[][] costs) {
        int num = costs.length;
        int[][] minCost = new int[num + 1][3];
        for (int i = 0; i < num; i++) {
            minCost[i + 1][0] = Math.min(minCost[i][1] + costs[i][0], minCost[i][2] + costs[i][0]);
            minCost[i + 1][1] = Math.min(minCost[i][0] + costs[i][1], minCost[i][2] + costs[i][1]);
            minCost[i + 1][2] = Math.min(minCost[i][0] + costs[i][2], minCost[i][1] + costs[i][2]);
        }
        return Math.min(minCost[num][0], Math.min(minCost[num][1], minCost[num][2]));
    }
}
// sol1
class Solution {
    public int minCost(int[][] costs) {
        int num = costs.length;
        int[] red = new int[num + 1];
        int[] blue = new int[num + 1];
        int[] green = new int[num + 1];
        for (int i = 0; i < num; i++) {
            red[i + 1] = Math.min(blue[i] + costs[i][0], green[i] + costs[i][0]);
            blue[i + 1] = Math.min(red[i] + costs[i][1], green[i] + costs[i][1]);
            green[i + 1] = Math.min(red[i] + costs[i][2], blue[i] + costs[i][2]);
        }
        return Math.min(red[num], Math.min(blue[num], green[num]));
    }
}
