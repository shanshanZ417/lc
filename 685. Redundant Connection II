// https://www.cnblogs.com/grandyang/p/8445733.html
// 开始我想的是找有没有indegree为0的，如果没有blabla。但这样只能知道有没有环，不能知道是哪条让他没成为tree

/*
directed graph中没有loop的条件
1. 有且只有一个node是完全没有indegree的，就是root。
2. 剩下的的node都必须只有一个indegree，不能>=2（那就有loop了）
*/

/*
directed graph中成为tree两个条件
1. 有且只有一个node是完全没有indegree的，就是root。
2. 剩下的的node都必须只有一个indegree，不能没有（那就隔离了），不能>=2（那就有loop了）
*/

/*
没loop，返回indegree=2后一条
有loop没indegree2，返回组成loop的
有loop和indegree2，返回组成loop且indegree2的（我们需要判断first和second谁组成了loop，那么就把要把second拿出去，如果还有loop，说明1组成的
没有的话，正好和fail in 情况1，返回second）

-> first -> indegree 前
-> second -> indegree 后

-> 有loop，发现没有first，返回组成loop的边（情况2）；有first，返回first（情况3，要把second拿出去，这样就知道是谁组成的loop）
-> 没loop，返回second（情况1）
*/
// uf 真的牛逼
class Solution {
    public int[] findRedundantDirectedConnection(int[][] edges) {
        int size = edges.length;
        int[] parents = new int[size + 1];
        Arrays.fill(parents, -1);
        int[] candidate1 = null;
        int[] candidate2 = null;
        for (int[] e : edges) {
            if (parents[e[1]] == -1) {
                parents[e[1]] = e[0];
            } else {
                candidate2 = new int[]{e[0], e[1]};
                candidate1 = new int[]{parents[e[1]], e[1]};
                e[1] = 0;
            }
        }
        for (int i = 0; i < parents.length; i++) {
            parents[i] = i;
        }
        for (int[] e : edges) {
            if (e[1] == 0) {
                continue;
            }
            int p1 = find(e[0], parents);
            int p2 = find(e[1], parents);
            if (p1 == p2) {
                if (candidate1 == null) {
                    return e;
                } 
                return candidate1;
            }
            parents[p1] = p2;
        }
        return candidate2;
    }
    private int find(int n, int[] parents) {
        int x = n;
        while (x != parents[x]) {
            x = parents[x];
        }
        while (n != x) {
            int parent = parents[n];
            parents[n] = x;
            n = parent;
        }
        return n;
    }
}
