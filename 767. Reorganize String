/*
"aab"
aba

"aabcde"
abacde

if not possible: 
s.length - max < max - 1
else:
"aaab"
abaa

aaabbbc
abababc

map<Character, Integer>
maxheap<Char> 

*/
class Solution {
    public String reorganizeString(String S) {
        if (S == null || S.isEmpty()) {
            return "";
        }
        Map<Character, Integer> map = new HashMap<>();
        for (char c : S.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        PriorityQueue<Character> maxheap = new PriorityQueue<>((c1, c2) -> (map.get(c2) - map.get(c1)));
        for (char c : map.keySet()) {
            maxheap.offer(c);
        }
        int max = map.get(maxheap.peek());
        if (S.length() - max < max - 1) {
            return "";
        }
        StringBuilder sb = new StringBuilder();
        while (!maxheap.isEmpty()) {
            char cur = maxheap.poll();
            if (sb.length() == 0 || sb.charAt(sb.length() - 1) != cur) {
                sb.append(cur);
                map.put(cur, map.get(cur) - 1);
                if (map.get(cur) > 0) {
                    maxheap.offer(cur);
                }
            } else {
                char next = maxheap.poll();
                sb.append(next);
                map.put(next, map.get(next) - 1);
                if (map.get(next) > 0) {
                    maxheap.offer(next);
                }
                maxheap.offer(cur);
            }
        }
        return sb.toString();
    }
}
