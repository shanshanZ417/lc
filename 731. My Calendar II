// brute-force
class MyCalendarTwo {
    List<int[]> calendars;
    List<int[]> overlaps;
    public MyCalendarTwo() {
        calendars = new ArrayList<>();
        overlaps = new ArrayList<>();
    }
    
    public boolean book(int start, int end) {
        for (int[] overlap : overlaps) {
            if (Math.max(overlap[0], start) < Math.min(overlap[1], end)) {
                return false;
            }
        }
        for (int[] calendar : calendars) {
            if (Math.max(calendar[0], start) < Math.min(calendar[1], end)) {
                overlaps.add(new int[]{Math.max(calendar[0], start), Math.min(calendar[1], end)});
            }
        }
        calendars.add(new int[]{start, end});
        return true;
    }
}

// Math
class MyCalendarTwo {
    TreeMap<Integer, Integer> books;
    public MyCalendarTwo() {
        books = new TreeMap<>();
    }
    
    public boolean book(int start, int end) {
        books.put(start, books.getOrDefault(start, 0) + 1); 
        books.put(end, books.getOrDefault(end, 0) - 1);
        
        int active = 0;
        for (int val : books.values()) {
            active += val;
            if (active >= 3) {
                books.put(start, books.get(start) - 1);
                books.put(end, books.get(end) + 1);
                return false;
                
            }
        }
        return true;
        
    }
}

