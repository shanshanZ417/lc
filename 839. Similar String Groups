// uf
class Solution {
    public int numSimilarGroups(String[] A) {
        Map<String, String> parents = new HashMap<>();
        Set<String> set = new HashSet<>();
        for (String s : A) {
            set.add(s);
            parents.put(s, s);
        }
        for (int i = 0; i < A.length; i++) {
            String p1 = find(A[i], parents);
            for (int j = i + 1; j < A.length; j++) {
                if (isSimilar(A[i], A[j])) {
                    String p2 = find(A[j], parents);
                    parents.put(p2, p1);
                }
            }
        }
        Set<String> result = new HashSet<>();
        for (String key : parents.keySet()) {
            String parent = find(key, parents);
            result.add(parent);
        }
        return result.size();
    }
    public boolean isSimilar(String s,String t){
        int res = 0, i = 0;
        while(res <= 2 && i < s.length()){
            if(s.charAt(i) != t.charAt(i)) res++;
            i++;
        }
        return res == 2;
    }
    private String find(String s, Map<String, String> parents) {
        String x = s;
        while (!x.equals(parents.get(x))) {
            x = parents.get(x);
        }
        while (!s.equals(x)) {
            String parent = parents.get(s);
            parents.put(s, x);
            s = parent;
        }
        return s;
        
    }
}
