class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
        Map<Integer,List<int[]>> map = new HashMap<>();
        for (int[] f : flights) {
            int s = f[0];
            int e = f[1];
            int price = f[2];
            if (!map.containsKey(s)) {
                map.put(s, new ArrayList<>());
            }
            map.get(s).add(new int[]{e, price});
        }
        PriorityQueue<int[]> minheap = new PriorityQueue<>((a, b) -> (a[0] - b[0]));
        minheap.offer(new int[]{0, src, K + 1});
        while (!minheap.isEmpty()) {
            int[] cur = minheap.poll();
            if (cur[1] == dst) {
                return cur[0];
            } 
            if (cur[2] > 0){
                List<int[]> child = map.getOrDefault(cur[1], new ArrayList<>());
                for (int[] c : child) {
                    minheap.offer(new int[]{cur[0] + c[1], c[0], cur[2] - 1});
                }
            }
        }
        return -1;
    }
}
