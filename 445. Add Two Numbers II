/*

reverse -> add -> reverse
(3 -> 4 -> 2 -> 7)
(4 -> 6 -> 5)
7 -> 0 -> 8 -> 7

      
(9 -> 5 -> 4 -> 3)  n = 4  d = 1
     (5 -> 3 -> 4)  n = 3


int val = l1.val + l2.val + helper(l1.next, l2.next);
l1.val = val / 10;
return val % 10;

*/
// sol2: stack
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Deque<ListNode> stack1 = new LinkedList<>();
        Deque<ListNode> stack2 = new LinkedList<>();
        while (l1 != null) {
            stack1.offerLast(l1);
            l1 = l1.next;
        }
        while (l2 != null) {
            stack2.offerLast(l2);
            l2 = l2.next;
        }
        ListNode nextNode = new ListNode(stack1.pollLast().val + stack2.pollLast().val);
        while (!stack1.isEmpty() || !stack2.isEmpty()) {
            int val = (stack1.isEmpty() ? 0 : stack1.pollLast().val) + (stack2.isEmpty() ? 0 : stack2.pollLast().val);
            ListNode cur = new ListNode(val);
            if (nextNode.val / 10 == 1) {
                cur.val = cur.val + 1;
                nextNode.val = nextNode.val % 10;
            }
            cur.next = nextNode;
            nextNode = cur;
        }
        if (nextNode.val / 10 == 1) {
            nextNode.val = nextNode.val % 10;
            ListNode head = new ListNode(1);
            head.next = nextNode;
            nextNode = head;
        }
        return nextNode;
    }
}
// sol1: recursion
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int size1 = findSize(l1);
        int size2 = findSize(l2);
        // Handle the first digit
        ListNode head = new ListNode(1);
        ListNode next = size1 >= size2 ? helper(l1, l2, size1 - size2) : helper(l2, l1, size2 - size1); 
        head.next = next;
        if (next != null && next.val / 10 == 1) {
            next.val = next.val % 10;
            return head;
        } 
        return head.next;
    }
    private ListNode helper(ListNode l1, ListNode l2, int diff) {
        if (l1 == null) {
            return null;
        }
        ListNode newNode = new ListNode(diff == 0 ? (l1.val + l2.val) : l1.val);
        ListNode next = diff == 0 ? helper(l1.next, l2.next, 0) : helper(l1.next, l2, diff - 1);
        if (next != null && next.val / 10 == 1) {
            newNode.val = newNode.val + 1;
            next.val = next.val % 10;
        }
        newNode.next = next;
        return newNode;
    }
    private int findSize(ListNode node) {
        ListNode dummy = node;
        int len = 0;
        while (dummy != null) {
            len++;
            dummy = dummy.next;
        }
        return len;
    } 
}

