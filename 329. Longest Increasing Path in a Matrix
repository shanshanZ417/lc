class Solution {
    int[][] direction = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    public int longestIncreasingPath(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }
        int max = 0;
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] memo = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int len = dfs(i, j, m, n, matrix, memo);
                max = Math.max(max, len);
            }
        }
        return max;
    }
    private int dfs(int x, int y, int m, int n, int[][] matrix, int[][] memo) {
        if (memo[x][y] != 0) {
            return memo[x][y];
            
        }
        int max = 1;
        for (int[] dir : direction) {
            int newX = dir[0] + x;
            int newY = dir[1] + y;
            if (newX < 0 || newX >= m || newY < 0 || newY >= n || matrix[newX][newY] <= matrix[x][y]) {
                continue;
            }
            int len = 1 + dfs(newX, newY, m, n, matrix, memo);
            max = Math.max(max, len);
        }
        memo[x][y] = max;
        return max;
    }
}
