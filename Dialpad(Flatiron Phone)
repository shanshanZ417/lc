// dfs + trie
public class Dialpad {
    public static void main(String[] args) {
        Dialpad test = new Dialpad();
        Set<String> dict = new HashSet<>();
        dict.add("ce");
        dict.add("cf");
        String digits = "23";
        List<String> res = test.letterCombinations(digits, dict);
        for (String r : res) {
             System.out.println(r);
        }
    }
    public List<String> letterCombinations(String digits, Set<String> dict) {
        if (digits == null || digits.length() == 0) {
            return new ArrayList<>();
        }
        String[] map = new String[]{"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        List<String> res = new ArrayList<>();
        Trie trie = new Trie(dict);
        helper(digits, 0, res, map, trie.root);
        return res;
    }
    private void helper(String digits, int index, List<String> res, String[] map, TrieNode node) {
        if (index == digits.length()) {
            if (node.isword) {
                res.add(node.word);
            }
            return;
        }
        for (char c : map[digits.charAt(index) - '0'].toCharArray()) {
            if (node.child[c - 'a'] == null) {
                continue;
            }
            helper(digits, index + 1, res, map, node.child[c - 'a']);
        }
    }
}
class TrieNode {
    TrieNode[] child;
    boolean isword;
    String word;
    public TrieNode() {
        child = new TrieNode[26];
    }
}
class Trie {
    TrieNode root;
    public Trie(Set<String> wordList) {
        root = new TrieNode();
        for (String word : wordList) {
            TrieNode node = root;
            for (char c : word.toCharArray()) {
                if (node.child[c - 'a'] == null) {
                    node.child[c - 'a'] = new TrieNode();
                }
                node = node.child[c - 'a'];
            }
            node.isword = true;
            node.word = word;
        }
    }
}
