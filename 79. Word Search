// dfs
class Solution {
    public boolean exist(char[][] board, String word) {
        int m = board.length;
        int n = board[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (dfs(i, j, board, word, 0, visited)) {
                    return true;
                }
            }
        }
        return false;
    }
    private boolean dfs(int i, int j, char[][] board, String word, int index, boolean[][] visited) {
        if (index == word.length()) {
            return true;
        }
        if (!isValid(i, j, board) || visited[i][j] || (board[i][j] != word.charAt(index))) {
            return false;
        } 
        visited[i][j] = true;
        if (dfs(i + 1, j, board, word, index + 1, visited) ||
           dfs(i - 1, j, board, word, index + 1, visited) ||
           dfs(i, j + 1, board, word, index + 1, visited) ||
           dfs(i, j - 1, board, word, index + 1, visited)) {
            return true;
        }
        visited[i][j] = false;
        return false;
    }
    private boolean isValid(int i, int j, char[][] board) {
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length) {
            return false;
        }
        return true;
    }
}
