// i + j = m + n - i - j;
// i = 0 ~ m;
// j = (m + n + 1) / 2 - i; in case for m + n is odd
// nums1[i - 1] < nums2[j] && nums2[j - 1] < nums[i]
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        return m <= n ? helper(nums1, nums2, m, n) : helper(nums2, nums1, n, m);
    }
    private double helper(int[] nums1, int[] nums2, int m, int n) {
        int mini = 0;
        int maxi = m;
        while (mini <= maxi) {
            int i = (mini + maxi) / 2;
            int j = ((m + n + 1) / 2) - i;
            if (i > 0 && nums1[i - 1] > nums2[j]) {
                maxi = i - 1;
            } else if ( i < m && nums2[j - 1] > nums1[i]) {
                mini = i + 1;
            } else {
                int leftmax = 0;
                if (i == 0) {
                    leftmax = nums2[j - 1];
                } else if (j == 0) {
                    leftmax = nums1[i - 1];
                } else {
                    leftmax = Math.max(nums1[i - 1], nums2[j - 1]);
                }
                if ((m + n) % 2 == 1) {
                    return (double)leftmax;
                }
                int rightmin = 0;
                if (i == m) {
                    rightmin = nums2[j];
                } else if (j == n) {
                    rightmin = nums1[i];
                } else {
                    rightmin = Math.min(nums1[i], nums2[j]);
                }
                return (leftmax + rightmin) / 2.0;
            }

        }
        return 0.0;
    }
}

