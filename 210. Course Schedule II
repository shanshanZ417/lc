// topological sort
class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] indegree = new int[numCourses];
        int[][] out = new int[numCourses][numCourses];
        for (int[] p : prerequisites) {
            indegree[p[0]]++;
            out[p[1]][p[0]] = 1;
        }
        Deque<Integer> queue = new LinkedList<>();
        for (int i = 0; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                queue.offerLast(i);
            }
        }
        int count = 0;
        int[] res = new int[numCourses];
        while (!queue.isEmpty()){
            Integer cur = queue.pollFirst();
            res[count] = cur;
            count++;
            for (int i = 0; i < numCourses; i++) {
                if (out[cur][i] == 1) {
                    indegree[i]--;
                    if (indegree[i] == 0) {
                        queue.offerLast(i);
                    }
                }
            }
        }
        return count == numCourses ? res : new int[]{};
    }
}
